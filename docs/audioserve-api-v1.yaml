openapi: 3.0.1
info:
  title: audioserve API
  description: REST API for audioserve
  version: 1.0.0
servers:
  - url: https://audioserve.zderadicka.eu
    description: Public demo server
  - url: http://localhost:3000
    description: Your local test server

tags:
- name: "Authentication"
  description: Authentication endpoint
- name: "Collections"
  description: Audio collections browsing and playing
- name: Positions
  description: Playback position


paths:
# authentication endpoint
  /authenticate:
    post:
      tags:
        - "Authentication"
      description: Authentication to server via shared secret
      security: [] # no security as this is an authentication endpoint
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                secret:
                  type: string
                  description: Salted shared secret
                  example: "w8lTEszPU3idF9sEawmRR3Ps3IVdMEnnaFZj5DV5tqY=|6+iBRdZRz/o6fvwHiEuS2sgDZS6YCw7wNHVX59YCh50="
              required:
                - "secret"
          application/json:
            schema:
              type: object
              properties:
                secret:
                  type: string
                  description: Salted shared secret
              required:
                - "secret"

            examples:
              sample:
                description: Salted shared secred `mypass`
                value:
                  secret: "w8lTEszPU3idF9sEawmRR3Ps3IVdMEnnaFZj5DV5tqY=|6+iBRdZRz/o6fvwHiEuS2sgDZS6YCw7wNHVX59YCh50="
      responses:
        "200":
          description: Successfull authentication, response contains authentication token
          content:
            text/plain:
              schema:
                type: string
              examples:
                '0':
                  value: >-
                    E114Vfv45RowIr0bFMNiJFRsPweZfINmhfTUFFy1Er8AAAAAY2drA/2XKsZSMnsc3a+yRIKjQIFaAEOcROCaTYR1jUjo6ow1
        "401":
          description: Failed authentication

  # collections end point
  /collections/:
    get:
      tags:
        - "Collections"
      description: List of available audio collection
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  names:
                    description: Names of available collections
                    type: array
                    maxItems: 100
                    items:
                      type: string
                  count:
                    type: integer
                    minimum: 1
                    maximum: 100
                    description: Size of names array
                  folder_download:
                    type: boolean
                    description: Is folder download endpoint enabled on server?
                  shared_positions:
                    type: boolean
                    description: Is playback position API enabled on server?
                  version:
                    type: string
                    description: Version of audioserve (and thus also version of API)
              examples:
                '0':
                  value: >-
                    {"version":"0.16.3","folder_download":true,"shared_positions":true,"count":1,"names":["audiobooks"]}
        "401":
          $ref: "#/components/responses/Unauthorized"

# transcodings endpoint
  /transcodings/:
    get:
      tags:
        - "Collections"
      description: Describes available transcodinds settings on server
      responses:
        '200':
          description: Success - returns transcodings settings
          content:
            application/json:
              schema:
                type: object
                properties:
                  high:
                    $ref:  "#/components/schemas/Transcoding"
                  low:
                    $ref:  "#/components/schemas/Transcoding"
                  medium:
                    $ref:  "#/components/schemas/Transcoding"
                  max_transcodings:
                    type: integer
                    description: Maximum number of parallel transcodings allowed by server
                    minimum: 2
                    maximum: 100
              examples:
                '0':
                  value: >-
                    {"max_transcodings":24,"low":{"bitrate":32,"name":"opus-in-ogg"},"medium":{"bitrate":48,"name":"opus-in-ogg"},"high":{"bitrate":64,"name":"opus-in-ogg"}}
        "401":
          $ref:  "#/components/responses/Unauthorized"
  
  # Cover endpoint
  /{col_id}/cover/{path}:
    get:
      tags:
        - "Collections"
      description: Returns cover image for indicated `path`
      parameters:
        - $ref: "#/components/parameters/CollectionId"
        - $ref: "#/components/parameters/Path"
          
      responses:
        '200':
          description: Success - returns image binary - jpeg or png
          content:
            "audio/*":
              schema:
                type: string
                format: binary
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"    
      
  /{col_id}/desc/{path}:
    get:
      tags:
        - "Collections"
      description: Returns description file
      parameters:
        - $ref: "#/components/parameters/CollectionId"
        - $ref: "#/components/parameters/Path"
      responses:
        '200':
          description: Success - returns description text - plain, html or markdown
          content:
            "text/*":
              schema:
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"


  /{col_id}/folder/:
    get:
      tags:
        - "Collections"
      description: Gets root folder of the collection
      parameters:
        - $ref: "#/components/parameters/CollectionId"
        - $ref: "#/components/parameters/Ordering"
        - $ref: "#/components/parameters/Group"
      responses:
        '200':
          description: Success -  returns JSON object describing audio folder
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AudioFolder"
              example: >-
                {
                  "is_file": false,
                  "modified": 1613948393506,
                  "total_time": 0,
                  "files": [],
                  "subfolders": [
                    {
                      "name": "Austene Jane",
                      "modified": 1613941742570,
                      "path": "Austene Jane",
                      "is_file": false,
                      "finished": false
                    },
                    {
                      "name": "Chesterton Gilbert Keith",
                      "modified": 1613824355322,
                      "path": "Chesterton Gilbert Keith",
                      "is_file": false,
                      "finished": false
                    },
                    {
                      "name": "Doyle Arthur Conan",
                      "modified": 1613825015324,
                      "path": "Doyle Arthur Conan",
                      "is_file": false,
                      "finished": false
                    }
                    {
                      "name": "Wells H G",
                      "modified": 1613902871789,
                      "path": "Wells H G",
                      "is_file": false,
                      "finished": false
                    }
                  ],
                  "cover": null,
                  "description": {
                    "path": "welcome.md",
                    "mime": "text/markdown"
                  },
                  "tags": null
                }
        "401":
          $ref: "#/components/responses/Unauthorized"

              
  /{col_id}/folder/{path}:
    get:
      tags:
        - "Collections"
      description: Gets content of audio folder
      parameters:
        - $ref: "#/components/parameters/CollectionId"
        - $ref: "#/components/parameters/Path"
        - $ref: "#/components/parameters/Ordering"
        - $ref: "#/components/parameters/Group"
      responses:
        '200':
          description: Success -  returns JSON object describing audio folder
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AudioFolder"
              examples:
                "Author folder":
                  value: >-
                    {
                      "is_file": false,
                      "modified": 1613902871789,
                      "total_time": 0,
                      "files": [],
                      "subfolders": [
                        {
                          "name": "Invisible Man",
                          "modified": 1613902936821,
                          "path": "Wells H G/Invisible Man",
                          "is_file": false,
                          "finished": false
                        }
                      ],
                      "cover": {
                        "path": "Wells H G/H.G._Wells_by_Beresford.jpg",
                        "mime": "image/jpeg"
                      },
                      "description": {
                        "path": "Wells H G/info.txt",
                        "mime": "text/plain"
                      },
                      "tags": null
                    }
                "Audiobook folder":
                  value: >-
                    {
                      "is_file": false,
                      "modified": 1613902936821,
                      "total_time": 18079,
                      "files": [
                        {
                          "name": "invisibleman_01_wells_64kb.mp3",
                          "path": "Wells H G/Invisible Man/invisibleman_01_wells_64kb.mp3",
                          "meta": {
                            "duration": 1362,
                            "bitrate": 64,
                            "tags": {
                              "title": "01 - Chapters I and II"
                            }
                          },
                          "mime": "audio/mpeg",
                          "section": null
                        },
                        {
                          "name": "invisibleman_02_wells_64kb.mp3",
                          "path": "Wells H G/Invisible Man/invisibleman_02_wells_64kb.mp3",
                          "meta": {
                            "duration": 1482,
                            "bitrate": 64,
                            "tags": {
                              "title": "02 - Chapters III and IV"
                            }
                          },
                          "mime": "audio/mpeg",
                          "section": null
                        }
                      ],
                      "subfolders": [],
                      "cover": {
                        "path": "Wells H G/Invisible Man/220px-Wells_-_The_Invisible_Man_-_Pearson_cover_1897.jpg",
                        "mime": "image/jpeg"
                      },
                      "description": {
                        "path": "Wells H G/Invisible Man/info.html",
                        "mime": "text/html"
                      },
                      "position": {
                        "path": "Wells H G/Invisible Man/invisibleman_09_wells_64kb.mp3",
                        "timestamp": 1635427462226,
                        "position": 1324.175
                      },
                      "tags": {
                        "genre": "speech",
                        "artist": "H. G. Wells",
                        "album": "The Invisible Man"
                      }
                    }
                "m4b folder": 
                  value: >-
                    {
                      "is_file": true,
                      "modified": 1615456636344,
                      "total_time": 63547,
                      "files": [
                          {
                              "name": "000 - Chapter_1",
                              "path": "Stoker Bram/Dracula/Dracula.m4b$$000 - Chapter_1$$0-1020288$$.m4b",
                              "meta": {
                                  "duration": 1020,
                                  "bitrate": 54,
                                  "tags": null
                              },
                              "mime": "audio/m4b",
                              "section": {
                                  "start": 0,
                                  "duration": 1020288
                              }
                          },
                          {
                              "name": "001 - Chapter_2",
                              "path": "Stoker Bram/Dracula/Dracula.m4b$$001 - Chapter_2$$1020288-2029004$$.m4b",
                              "meta": {
                                  "duration": 1008,
                                  "bitrate": 54,
                                  "tags": null
                              },
                              "mime": "audio/m4b",
                              "section": {
                                  "start": 1020288,
                                  "duration": 1008716
                              }
                          }
                      ],
                      "subfolders": [],
                      "cover": {
                          "path": "Stoker Bram/Dracula/800px-Dracula-First-Edition-1897_(cropped).jpg",
                          "mime": "image/jpeg"
                      },
                      "description": {
                          "path": "Stoker Bram/Dracula/info.txt",
                          "mime": "text/plain"
                      },
                      "position": {
                          "path": "Stoker Bram/Dracula/Dracula.m4b$$004 - Chapter_5$$3452020-4080784$$.m4b",
                          "timestamp": 1635963253408,
                          "position": 111.82
                      },
                      "tags": {
                          "title": "Dracula",
                          "album": "Dracula",
                          "genre": "Audio Book",
                          "date": "2014",
                          "artist": "Bram Stoker"
                      }
                    }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      
  /{col_id}/audio/{path}:
    get:
      tags:
        - "Collections"
      description: Streams (possibly transcoded) audio file
      parameters:
        - $ref: "#/components/parameters/CollectionId"
        - $ref: "#/components/parameters/Path"
          example: Austene Jane/Pride And Prejudice/prideandprejudice_22_austen_64kb.mp3
        - name: seek
          in: query
          description: |-
            Stars playback as <seek> seconds from beginning of file.
            Beware overusing this parameter, as it can cause quite ineffective usage
            of bandwidth and transcoding (which each seek like this part of file from
            seek position is send again)
          schema:
            type: number
            format: float
          example: 223.299
        - name: trans
          in: query
          description: |-
            Required transcoding of the file **l**ow, **m**edium or **h**igh
            as described by `/transcodings` endpoint response
            If omitted or set to **0** no transcoding is done
          schema:
            type: string
            enum: [l, m, h, "0"]
          example: m
        - name: range
          in: header
          description: |-
            Optionally client can request range of bytes from file, will only work if
            file is not actually transcoded.
            Range is standard HTTP header as per [RFC 7233](https://datatracker.ietf.org/doc/html/rfc7233) 
          schema:
            type: string
          example: bytes=14286848-
          
      responses:
        '200':
          description: Success - audio is sent in response body
          content:
            "audio:*":
              example: N/A
              schema:
                type: string
                format: binary
                description: |-
                  Audio stream in original or transcoded version.
                  If size of stream is not know (transcoded stream) response body is chunked
          headers:
            x-transcode:
              description: If file is transcoded contains information about transcoding
              schema:
                type: string
              example: codec=opus-in-ogg; bitrate=48
        '206':
          description: "Success - part of audio file, if Range: bytes were requested"
          content:
            "audio/*":
              example: N/A
              schema:
                type: string
                format: binary
          headers:
            content-range:
              description: Bytes range returned in response to request header `Range`
              schema:
                type: string
              example: bytes 14286848-14296697/14296698
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
                             
  /{col_id}/search:
    get:
      tags:
        - "Collections"
      description: |
        Search collection - search for terms with collection paths (path only not metadata tags).
        Search is looking only for folders (including virtual folders for chaptered files).
      parameters:
        - $ref: "#/components/parameters/CollectionId"
        - $ref: "#/components/parameters/Ordering"
        - name: q
          in: query
          required: true
          description: |
            Search terms (separated by space). Looks for all terms on folder path.
          schema:
            type: string
      responses:
        '200':
          description: Success -  all found folders within this collection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResult"
              example: >-
                {"files":[],"subfolders":[{"name":"Around The World in Eighty Days","modified":1613824559416,"path":"Verne Jules/Around The World in Eighty Days","is_file":false,"finished":false},
                {"name":"Austene Jane","modified":1613941742570,"path":"Austene Jane","is_file":false,"finished":false}]}
        "401":
          $ref: "#/components/responses/Unauthorized"

  /{col_id}/recent:
    get:
      tags:
        - "Collections"
      description: |
        Lists top 64 most recent folders in the collection (based on folder modification time). 
        Sorted by folder modification time descendently - e.g most recent is first.
      parameters:
        - $ref: "#/components/parameters/CollectionId"
      responses:
        '200':
          description: Success -  most recent folders
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResult"
              example: >-
                {"files":[],"subfolders":[{"name":"Around The World in Eighty Days","modified":1613824559416,"path":"Verne Jules/Around The World in Eighty Days","is_file":false,"finished":false},
                {"name":"Austene Jane","modified":1613941742570,"path":"Austene Jane","is_file":false,"finished":false}]}
        "401":
          $ref: "#/components/responses/Unauthorized"

  /{col_id}/download/{path}:
    get:
      tags:
        - "Collections"
      description: Downloads content of folder as an archive (zip or tar)
      parameters:
        - $ref: "#/components/parameters/CollectionId"
        - $ref: "#/components/parameters/Path"
        - name: fmt
          in: query
          description: |-
            Archive format - zip(default) or tar
          schema:
            type: string
            enum: [zip, tar]
          example: zip
      responses:
        "200":
          description: Success
          content:
            application/zip:
              schema:
                type: string
                format: binary
                description: zip archive
            application/x-tar:
              schema:
                type: string
                format: binary
                description: tar archive
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  
  /positions/{group}:
    get:
      tags:
        - Positions
      description: Get recent positions for the group
      parameters:
        - $ref: "#/components/parameters/GroupInPath"
        - $ref: "#/components/parameters/Finished"
        - $ref: "#/components/parameters/Unfinished"
        - $ref: "#/components/parameters/From"
        - $ref: "#/components/parameters/To"
      responses:
        "200":
          description: |-
            List of recent positions for given group.
            Ordered from most recent.
            Limited to 1000 items max.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Position"
                maxItems: 1000
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - Positions
      parameters:
        - $ref: "#/components/parameters/GroupInPath"
      description: Updates recent position for given group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Position"
      responses:
        "201":
          description: Position updated
        "401":
          $ref: "#/components/responses/Unauthorized"

  /positions/{group}/last:
    get:
      tags:
        - Positions
      parameters:
        - $ref: "#/components/parameters/GroupInPath"
      description: Last recent position for this group 
      responses:
        "200":
          description: |-
            Last recent position or null
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Position"
        "401":
          $ref: "#/components/responses/Unauthorized"

components:
  schemas:
    Transcoding:
      type: object
      properties:
        name:
          type: string
          description: Name of transcoding in form of audio_codec-in-container, for instance opus-in-ogg
        bitrate:
          type: integer
          description: Average bitrate of the transcoding in kbps
          minimum: 0
    TypedFile:
      type: object
      properties:
        path:
          type: string
          description: path to the file with collection
          maxLength: 512
        mime:
          type: string
          description: mime type of the file
    Subfolder:
      type: object
      properties:
        name:
          type: string
        path:
          type: string
        is_file:
          type: boolean
          description: Is virtual folder - e.g. representing big chapterized file (.m4b etc.)
        modified:
          type: number
          description: last modification timestamp (unix time in miliseconds)
        finished:
          type: boolean
          description: was folder listened to the end (by given group, valid only if group parameter was provided)
    AudioFolder:
      type: object
      properties:
        is_file:
          type: boolean
          description: Is virtual folder - e.g. representing big chapterized file (.m4b etc.)
        modified:
          type: number
          description: last modification timestamp (unix time in miliseconds)
        total_time:
          type: integer
          description: Total playback time of the audiofolder in seconds
        subfolders:
          type: array
          items:
            $ref: "#/components/schemas/Subfolder"
        files:
          type: array
          items:
            $ref: "#/components/schemas/AudioFile"
        cover:
          description: Cover image
          $ref: "#/components/schemas/TypedFile"
        description:
          $ref: "#/components/schemas/TypedFile"
        tags: 
          type: object
          nullable: true
          description: Metadata tags for this folders - map of name to value
    AudioFile:
      type: object
      properties:
        "name": 
          type: string
          example: "000 - Chapter_1"
        "path": 
          type: string
          example: "Stoker Bram/Dracula/Dracula.m4b$$000 - Chapter_1$$0-1020288$$.m4b"
        "meta":
          type: object
          nullable: true
          properties:
            "duration":
              type: integer
              description: Duration of audio file in seconds
              example: 1020,
            "bitrate": 
              type: integer
              description: Encoding bitrate of file - original, before transcoding 
              example: 54,
            "tags":
              type: object
              description: Metadata tags as map of name to value
              nullable: true
        "mime": 
          type: string
          description: Mite type of audio file (before transcoding)
          example: "audio/m4b"
        "section":
          type: object
          nullable: true
          description: For big chaptered files this is start and duration (in milliseconds) of chapter with the file
          properties:
            "start": 
              type: integer
              description: Start of chapter in ms
              example: 0
            "duration": 
              type: integer
              description: Duration of chapter in ms
              example: 1020288
    SearchResult:
      type: object
      properties:
        files:
          type: array
          items: 
            $ref: "#/components/schemas/AudioFile"
        subfolders:
          type: array
          items:
            $ref: "#/components/schemas/Subfolder"
    Position:
      type: object
      description: Playback position
      nullable: true
      properties:
        timestamp:
          type: integer
          format: int64
          description: Position timestamp - unix time in ms
        collection:
          type: integer
          format: int32
          description: Collection number (index in names from response in /collections endpoint)
        folder: 
          type: string
          description: Audio folder path
        file: 
          type: string
          description: Audio file (or chapter)
        folder_finished: 
          type: boolean
          description: Folder was listened to the end
        position:
          type: number 
          format: float
          description: Position in audiofile in seconds
      required:
        - timestamp
        - collection
        - folder
        - file
        - position
  parameters:
    CollectionId:
      name: col_id
      description: id of collection, is index of collection from `names` array returned by `/collections` endpoint
      in: path
      required: true
      schema:
        type: integer
        minimum: 0
        maximum: 100
      example: 0
    Path:
      name: path
      description:  path to the item (as returned in by API, do not forget to urlencode the value)
      in: path
      required: true
      schema:
        type: string
        # format: path # non-standard type
        maxLength: 512
    Ordering:
      name: ord
      in: query
      description: |-
        ordering of subfolders, two values are now supported:
        - `a` alphabetical (default if not present)
        - `m` recent first (using folder mtime)
      schema:
        type: string
        enum: [a, m]
    Group:
      name: group
      description: |
        Playback position sharing group.
        If present last know position for the folder can be included in response
      required: false
      in: query
      schema:
        type: string
      example: ivan
    GroupInPath:
      name: group
      description: |
        Playback position sharing group.
      required: true
      in: path
      schema:
        type: string
      example: ivan
    Finished:
      name: finished
      description: Filters only positions for finished folders
      required: false
      in: query
      schema:
        type: boolean
    Unfinished:
      name: unfinished
      description: Filters only positions for unfinished folders
      required: false
      in: query
      schema:
        type: boolean
    From:
      name: from
      description: Filters positions that are older than this timestamp  (unix time in ms)
      required: false
      in: query
      schema:
        type: integer
        format: int64
    To:
      name: to
      description: Filters positions that are newer or equal than this timestamp  (unix time in ms)
      required: false
      in: query
      schema:
        type: integer
        format: int64

  responses:
    NotFound:
      description: The specified resource was not found
      content:
        text/plain:
          schema: 
            type: string
          example: Not Found
    Unauthorized:
      description: Not authorized to access this resurce, authentication token invalid or missing
      content:
        text/plain:
          schema: 
            type: string
          example:  Access denied

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: custom
      description: audioserve custom authentication scheme, get token from /authenticate endpoint

security:
  - bearerAuth: []
